package com.wangle.happysing.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wangle.happysing.db.ChineseFont;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHINESE_FONT".
*/
public class ChineseFontDao extends AbstractDao<ChineseFont, Long> {

    public static final String TABLENAME = "CHINESE_FONT";

    /**
     * Properties of entity ChineseFont.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
        public final static Property Spell = new Property(2, String.class, "spell", false, "SPELL");
    }


    public ChineseFontDao(DaoConfig config) {
        super(config);
    }
    
    public ChineseFontDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHINESE_FONT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"VALUE\" TEXT," + // 1: value
                "\"SPELL\" TEXT);"); // 2: spell
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHINESE_FONT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChineseFont entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
 
        String spell = entity.getSpell();
        if (spell != null) {
            stmt.bindString(3, spell);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChineseFont entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
 
        String spell = entity.getSpell();
        if (spell != null) {
            stmt.bindString(3, spell);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ChineseFont readEntity(Cursor cursor, int offset) {
        ChineseFont entity = new ChineseFont( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // value
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // spell
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChineseFont entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpell(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChineseFont entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChineseFont entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChineseFont entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
